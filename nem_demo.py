# Filename: nem_mock_demo_vn.py
import streamlit as st
import json
from datetime import datetime, timezone
import time

# --- D·ªØ li·ªáu Gi·∫£ (Mock Data) ---
# ƒê·ªãnh nghƒ©a c√°c ph·∫£n h·ªìi m·∫´u, tr√¥ng gi·ªëng th·∫≠t, cho c√°c input c·ª• th·ªÉ

# ƒê·ªãa ch·ªâ v√≠ NEM m·∫´u (d√πng ƒë·ªãa ch·ªâ n√†y khi nh·∫≠p v√†o √¥ input)
MOCK_EXAMPLE_ADDRESS = "NACTUS-KR5KHJ-SWT4EK-NE55M7-U74FKW-KEREEE-YSU5"
MOCK_CLEANED_ADDRESS = MOCK_EXAMPLE_ADDRESS.replace("-", "")

# M√£ hash giao d·ªãch m·∫´u (d√πng m√£ hash n√†y khi nh·∫≠p v√†o √¥ input)
MOCK_EXAMPLE_HASH = "a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2"

# ƒê√¢y ch√≠nh l√† "b·∫£ng d·ªØ li·ªáu ·∫£o" b·∫°n c·∫ßn, l∆∞u d∆∞·ªõi d·∫°ng dictionary Python
MOCK_DATA = {
    # D·ªØ li·ªáu gi·∫£ cho tr·∫°ng th√°i node
    "/heartbeat": {
        "data": {"code": 1, "type": 2, "message": "ok (D·ªØ li·ªáu gi·∫£)"},
        "error": None
    },
    "/chain/height": {
        "data": {"height": 4012345}, # Chi·ªÅu cao kh·ªëi m·∫´u
        "error": None
    },
    "/node/info": {
        "data": {
            "node": { "protocol": "http", "host": "mock.nem.local", "port": 7890, },
            "nisInfo": {
                "currentTime": int(time.time() * 1000),
                "application": "NEM Infrastructure Server",
                "startTime": int((time.time() - 3600*24) * 1000), # Gi·∫£ l·∫≠p node ch·∫°y 1 ng√†y
                "version": "0.6.99-MOCK-VN", # Phi√™n b·∫£n gi·∫£
                "signer": None,
                "networkId": 104 # 104 l√† Mainnet, -104 l√† Testnet
            }
        },
        "error": None
    },
    # D·ªØ li·ªáu gi·∫£ cho tra c·ª©u t√†i kho·∫£n (ch·ªâ ho·∫°t ƒë·ªông v·ªõi ƒë·ªãa ch·ªâ MOCK_EXAMPLE_ADDRESS)
    f"/account/get?address={MOCK_CLEANED_ADDRESS}": {
        "data": {
            "meta": {"cosignatories": [], "cosignatoryOf": [], "status": "LOCKED", "remoteStatus": "INACTIVE"},
            "account": {
                "address": MOCK_CLEANED_ADDRESS,
                "harvestedBlocks": 15,
                "balance": 123456789, # S·ªë d∆∞: 123.456789 XEM (ƒë∆°n v·ªã microXEM)
                "importance": 0.00012345,
                "vestedBalance": 100000000, # S·ªë d∆∞ ƒë√£ x√°c nh·∫≠n: 100 XEM
                "publicKey": "a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2", # Public key m·∫´u (64 k√Ω t·ª± hex)
                "label": "T√†i kho·∫£n Demo Gi·∫£",
                "multisigInfo": {}
            }
        },
        "error": None
    },
    # D·ªØ li·ªáu gi·∫£ cho tra c·ª©u giao d·ªãch (ch·ªâ ho·∫°t ƒë·ªông v·ªõi MOCK_EXAMPLE_HASH)
    f"/transaction/get?hash={MOCK_EXAMPLE_HASH}": {
        "data": {
            "meta": {
                "innerHash": {}, "id": 98765, "hash": {"data": MOCK_EXAMPLE_HASH}, "height": 4012300
            },
            "transaction": {
                "timeStamp": 195000000, # Th·ªùi gian NEM (gi√¢y t√≠nh t·ª´ block g·ªëc)
                "amount": 50000000, # S·ªë l∆∞·ª£ng: 50 XEM (microXEM)
                "signature": "f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4b5a6f1e2d3c4", # Ch·ªØ k√Ω m·∫´u (128 k√Ω t·ª± hex)
                "fee": 100000, # Ph√≠: 0.1 XEM (microXEM)
                "recipient": "NBZDEE-37UHFG-QS3HEA-CQIP3W-XMYNP4-6HDPPA-Y2K4", # ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n m·∫´u
                "type": 257, # Lo·∫°i giao d·ªãch: Transfer (Chuy·ªÉn kho·∫£n)
                "deadline": 195003600, # H·∫°n ch√≥t (NEM time)
                "message": {
                    # Hex c·ªßa "Day la tin nhan giao dich gia."
                    "payload": "446179206c612074696e206e68616e206769616f2064696368206769612e",
                    "type": 1 # Lo·∫°i tin nh·∫Øn: Plain (vƒÉn b·∫£n th∆∞·ªùng)
                },
                "version": 1744830465, # Version cho Mainnet (-1744830463 cho testnet)
                "signer": "a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2c3d4e5f6a1b2" # Public key ng∆∞·ªùi g·ª≠i (gi·ªëng t√†i kho·∫£n m·∫´u)
            }
        },
        "error": None
    },
    # D·ªØ li·ªáu l·ªói gi·∫£ khi kh√¥ng t√¨m th·∫•y t√†i kho·∫£n
    "ERROR_ACCOUNT_NOT_FOUND": {
        "data": None,
        "error": "L·ªói API Gi·∫£: Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh."
    },
    # D·ªØ li·ªáu l·ªói gi·∫£ khi kh√¥ng t√¨m th·∫•y giao d·ªãch
    "ERROR_TRANSACTION_NOT_FOUND": {
         "data": None,
         "error": "L·ªói API Gi·∫£: M√£ hash giao d·ªãch kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá."
    }
}

# --- H√†m l·∫•y d·ªØ li·ªáu gi·∫£ ---
def get_mock_data(endpoint, params=None):
    """Tr·∫£ v·ªÅ d·ªØ li·ªáu gi·∫£ d·ª±a tr√™n endpoint v√† tham s·ªë."""
    # X·ª≠ l√Ω logic ƒë·ªÉ tr·∫£ v·ªÅ ƒë√∫ng d·ªØ li·ªáu gi·∫£ d·ª±a tr√™n endpoint v√† params
    if endpoint == "/account/get":
        # N·∫øu tra c·ª©u t√†i kho·∫£n, ki·ªÉm tra xem ƒë·ªãa ch·ªâ c√≥ kh·ªõp v·ªõi ƒë·ªãa ch·ªâ m·∫´u kh√¥ng
        if params and params.get('address') == MOCK_CLEANED_ADDRESS:
            key = f"/account/get?address={MOCK_CLEANED_ADDRESS}"
            return MOCK_DATA[key]['data'], MOCK_DATA[key]['error']
        else:
            # N·∫øu kh√¥ng kh·ªõp, tr·∫£ v·ªÅ l·ªói gi·∫£ "kh√¥ng t√¨m th·∫•y"
            return MOCK_DATA["ERROR_ACCOUNT_NOT_FOUND"]['data'], MOCK_DATA["ERROR_ACCOUNT_NOT_FOUND"]['error']
    elif endpoint == "/transaction/get":
        # N·∫øu tra c·ª©u giao d·ªãch, ki·ªÉm tra xem hash c√≥ kh·ªõp v·ªõi hash m·∫´u kh√¥ng
        lookup_hash = params.get('hash') or params.get('id') # Ch·∫•p nh·∫≠n c·∫£ 'hash' v√† 'id'
        if params and lookup_hash == MOCK_EXAMPLE_HASH:
             key = f"/transaction/get?hash={MOCK_EXAMPLE_HASH}"
             return MOCK_DATA[key]['data'], MOCK_DATA[key]['error']
        else:
             # N·∫øu kh√¥ng kh·ªõp, tr·∫£ v·ªÅ l·ªói gi·∫£ "kh√¥ng t√¨m th·∫•y"
             return MOCK_DATA["ERROR_TRANSACTION_NOT_FOUND"]['data'], MOCK_DATA["ERROR_TRANSACTION_NOT_FOUND"]['error']
    elif endpoint in MOCK_DATA:
        # N·∫øu l√† c√°c endpoint tr·∫°ng th√°i node, tr·∫£ v·ªÅ d·ªØ li·ªáu t∆∞∆°ng ·ª©ng
        return MOCK_DATA[endpoint]['data'], MOCK_DATA[endpoint]['error']
    else:
        # N·∫øu endpoint kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong d·ªØ li·ªáu gi·∫£
        return None, f"Endpoint ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh d·ªØ li·ªáu gi·∫£: {endpoint}"

# --- H√†m l·∫•y t√™n lo·∫°i giao d·ªãch ---
def get_transaction_type_name(tx_type):
    """Get human-readable name for NEM transaction type."""
    transaction_types = {
        257: "Transfer Transaction",
        258: "Importance Transfer Transaction",
        259: "Aggregate Modification Transaction",
        4097: "Provision Namespace Transaction",
        4098: "Mosaic Creation Transaction",
        4099: "Mosaic Supply Change Transaction",
        8193: "Account Key Link Transaction",
        8194: "Node Key Link Transaction",
        8195: "VRF Key Link Transaction",
        16385: "Account Metadata Transaction",
        16386: "Mosaic Metadata Transaction",
        16387: "Namespace Metadata Transaction",
        32769: "Account Address Restriction Transaction",
        32770: "Account Mosaic Restriction Transaction",
        32771: "Account Operation Restriction Transaction",
        32772: "Mosaic Address Restriction Transaction",
        32773: "Mosaic Global Restriction Transaction",
        65537: "Aggregate Complete Transaction",
        65538: "Aggregate Bonded Transaction",
        131073: "Lock Transaction",
        131074: "Secret Lock Transaction",
        131075: "Secret Proof Transaction",
        196609: "Account Property Transaction",
        262145: "Mosaic Definition Transaction",
        262146: "Mosaic Supply Change Transaction",
        524289: "Address Alias Transaction",
        524290: "Mosaic Alias Transaction",
        786433: "Account Restriction Transaction",
        1048577: "Mosaic Restriction Transaction",
        1310721: "Exchange Offer Transaction",
        1310722: "Exchange Withdrawal Transaction",
        1310723: "Exchange Deposit Transaction",
        1310724: "Exchange Cancel Transaction",
        1310725: "Exchange Claim Transaction"
    }
    return transaction_types.get(tx_type, "Unknown Transaction Type")

# --- Giao di·ªán ·ª©ng d·ª•ng Streamlit ---
st.set_page_config(page_title="NEM (XEM) Mock Demo", layout="wide")

# L·∫•y th·ªùi gian hi·ªán t·∫°i
current_time_utc = datetime.now(timezone.utc)
current_time_local = datetime.now()

st.title("üéì Demo NEM (XEM) - D·ªØ li·ªáu Gi·∫£")
st.caption(f"Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn. Th·ªùi gian hi·ªán t·∫°i: {current_time_local.strftime('%Y-%m-%d %H:%M:%S')} (Local), {current_time_utc.strftime('%Y-%m-%d %H:%M:%S %Z')} (UTC)")
st.info("‚ÑπÔ∏è **L∆∞u √Ω:** Demo n√†y s·ª≠ d·ª•ng **d·ªØ li·ªáu gi·∫£** ƒë∆∞·ª£c l∆∞u tr·ªØ s·∫µn trong code. N√≥ **kh√¥ng** k·∫øt n·ªëi ƒë·∫øn m·∫°ng NEM th·∫≠t. H√£y s·ª≠ d·ª•ng c√°c ƒë·ªãa ch·ªâ/hash m·∫´u ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ xem d·ªØ li·ªáu.")
st.markdown("---")

# --- Ph·∫ßn ch·ªçn Node (ƒê∆°n gi·∫£n h√≥a v√¨ l√† d·ªØ li·ªáu gi·∫£) ---
st.sidebar.header("Ngu·ªìn D·ªØ Li·ªáu")
st.sidebar.success("üü¢ ƒêang d√πng Ngu·ªìn D·ªØ Li·ªáu Gi·∫£ (Mock)")
st.sidebar.markdown("Demo n√†y kh√¥ng k·∫øt n·ªëi ƒë·∫øn node NEM n√†o.")

# --- C√°c Tab hi·ªÉn th·ªã ---
tab1, tab2, tab3 = st.tabs(["üìä Tr·∫°ng Th√°i Node (Gi·∫£)", "üë§ Th√¥ng Tin T√†i Kho·∫£n (Gi·∫£)", "üìÑ Tra C·ª©u Giao D·ªãch (Gi·∫£)"])

# --- Tab 1: Tr·∫°ng Th√°i Node Gi·∫£ ---
with tab1:
    st.subheader("Tr·∫°ng Th√°i Node & Th√¥ng Tin Chu·ªói (Gi·∫£)")
    if st.button("Hi·ªÉn th·ªã Tr·∫°ng Th√°i Node Gi·∫£", key="check_node"):
        st.info("ƒêang t·∫£i d·ªØ li·ªáu tr·∫°ng th√°i gi·∫£...")
        # Gi·∫£ l·∫≠p qu√° tr√¨nh t·∫£i
        progress_bar = st.progress(0)
        status_area = st.empty()
        results = {}
        endpoints_to_check = {"Heartbeat": "/heartbeat", "Chain Height": "/chain/height", "Node Info": "/node/info"}
        total_checks = len(endpoints_to_check)

        for i, (name, endpoint) in enumerate(endpoints_to_check.items()):
            status_area.write(f"ƒêang l·∫•y d·ªØ li·ªáu gi·∫£ cho {name}...")
            data, error = get_mock_data(endpoint) # G·ªçi h√†m l·∫•y d·ªØ li·ªáu gi·∫£
            results[name] = {'data': data, 'error': error}
            progress_bar.progress((i + 1) / total_checks)
            time.sleep(0.2)

        status_area.success("ƒê√£ t·∫£i xong d·ªØ li·ªáu gi·∫£.")
        st.markdown("---"); st.subheader("K·∫øt qu·∫£:")

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ gi·∫£
        hb_res = results["Heartbeat"]
        if hb_res['error']: st.error(f"üíî L·ªói Heartbeat gi·∫£: {hb_res['error']}")
        elif hb_res['data']: st.success(f"‚úÖ Heartbeat Node Gi·∫£ OK: {hb_res['data'].get('message')}")
        else: st.warning("‚ùì Kh√¥ng c√≥ d·ªØ li·ªáu heartbeat gi·∫£.")
        st.divider()

        height_res = results["Chain Height"]
        if height_res['error']: st.error(f"üß± L·ªói Chi·ªÅu Cao Chu·ªói gi·∫£: {height_res['error']}")
        elif height_res['data']: st.success(f"‚õìÔ∏è Chi·ªÅu Cao Chu·ªói Gi·∫£: **{height_res['data']['height']}**"); st.json(height_res['data'])
        else: st.warning("‚ùì Kh√¥ng c√≥ d·ªØ li·ªáu chi·ªÅu cao chu·ªói gi·∫£.")
        st.divider()

        nodeinfo_res = results["Node Info"]
        if nodeinfo_res['error']: st.error(f"‚ÑπÔ∏è L·ªói Th√¥ng Tin Node gi·∫£: {nodeinfo_res['error']}")
        elif nodeinfo_res['data']: st.info("Th√¥ng Tin Node Gi·∫£:"); st.json(nodeinfo_res['data']); st.success("‚úÖ ƒê√£ hi·ªÉn th·ªã th√¥ng tin node gi·∫£.")
        else: st.warning("‚ùì Kh√¥ng c√≥ d·ªØ li·ªáu th√¥ng tin node gi·∫£.")


# --- Tab 2: Th√¥ng Tin T√†i Kho·∫£n Gi·∫£ ---
with tab2:
    st.subheader("Th√¥ng Tin T√†i Kho·∫£n (Gi·∫£)")
    st.markdown(f"**Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ m·∫´u sau ƒë·ªÉ xem d·ªØ li·ªáu:** `{MOCK_EXAMPLE_ADDRESS}`")
    xem_address_input = st.text_input(
        "Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ NEM",
        "",
        placeholder=f"D√°n ƒë·ªãa ch·ªâ m·∫´u v√†o ƒë√¢y: {MOCK_EXAMPLE_ADDRESS}"
    ).strip().upper().replace("-", "") # X√≥a d·∫•u g·∫°ch ngang v√† chuy·ªÉn th√†nh ch·ªØ hoa

    if st.button("Xem Chi Ti·∫øt T√†i Kho·∫£n Gi·∫£", key="get_account"):
        if not xem_address_input:
            st.warning("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√≠ NEM (s·ª≠ d·ª•ng ƒë·ªãa ch·ªâ m·∫´u!).")
        else:
            st.info(f"ƒêang t√¨m d·ªØ li·ªáu gi·∫£ cho ƒë·ªãa ch·ªâ: `{xem_address_input}`")
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu gi·∫£..."):
                # G·ªçi h√†m l·∫•y d·ªØ li·ªáu gi·∫£ cho t√†i kho·∫£n
                acc_data, acc_error = get_mock_data("/account/get", params={'address': xem_address_input})
                time.sleep(0.5) # Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ

            if acc_error:
                st.error(f"‚ùå {acc_error}") # Hi·ªÉn th·ªã l·ªói gi·∫£ (n·∫øu ƒë·ªãa ch·ªâ kh√¥ng kh·ªõp m·∫´u)
            elif acc_data and 'account' in acc_data:
                st.success(f"‚úÖ Hi·ªÉn th·ªã d·ªØ li·ªáu gi·∫£ cho T√†i kho·∫£n: `{acc_data['account'].get('address', 'N/A')}`")
                # Ph·∫ßn hi·ªÉn th·ªã gi·ªëng nh∆∞ tr∆∞·ªõc, nh∆∞ng d√πng d·ªØ li·ªáu gi·∫£
                account_info = acc_data['account']
                balance_micro = account_info.get('balance', 0)
                balance_xem = balance_micro / 1_000_000
                st.metric(label="S·ªë d∆∞ (XEM)", value=f"{balance_xem:,.6f}")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric(label="ƒêi·ªÉm Importance", value=f"{account_info.get('importance', 0):.8f}")
                    vested_micro = account_info.get('vestedBalance', 0)
                    vested_xem = vested_micro / 1_000_000
                    st.metric(label="S·ªë d∆∞ Vested (XEM)", value=f"{vested_xem:,.6f}")
                with col2:
                    st.metric(label="S·ªë kh·ªëi ƒë√£ Harvest", value=f"{account_info.get('harvestedBlocks', 0)}")
                st.text_area("Public Key", value=f"{account_info.get('publicKey', 'N/A')}", height=68, disabled=True)
                st.write(f"**Nh√£n:** `{account_info.get('label', 'Kh√¥ng c√≥')}`")
                with st.expander("Xem D·ªØ Li·ªáu Th√¥ (Gi·∫£)"):
                    st.json(acc_data)
            else:
                 st.error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t√†i kho·∫£n gi·∫£ h·ª£p l·ªá.")

# --- Tab 3: Tra C·ª©u Giao D·ªãch Gi·∫£ ---
with tab3:
    st.subheader("Tra C·ª©u Giao D·ªãch (Gi·∫£)")
    st.markdown(f"**Nh·∫≠p m√£ hash giao d·ªãch m·∫´u sau ƒë·ªÉ xem d·ªØ li·ªáu:** `{MOCK_EXAMPLE_HASH}`")
    tx_hash_input = st.text_input("Nh·∫≠p M√£ Hash Giao D·ªãch", "", placeholder=f"D√°n m√£ hash m·∫´u v√†o ƒë√¢y: {MOCK_EXAMPLE_HASH}").strip().lower()

    if st.button("Xem Chi Ti·∫øt Giao D·ªãch Gi·∫£", key="get_tx"):
        if not tx_hash_input:
            st.warning("Vui l√≤ng nh·∫≠p m√£ hash giao d·ªãch (s·ª≠ d·ª•ng m√£ m·∫´u!).")
        elif len(tx_hash_input) != 64: # Ki·ªÉm tra ƒë·ªô d√†i c∆° b·∫£n
             st.warning("‚ö†Ô∏è M√£ hash giao d·ªãch th∆∞·ªùng c√≥ 64 k√Ω t·ª± hexa.")
        else:
            st.info(f"ƒêang t√¨m d·ªØ li·ªáu gi·∫£ cho hash: `{tx_hash_input}`")
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu gi·∫£..."):
                # G·ªçi h√†m l·∫•y d·ªØ li·ªáu gi·∫£ cho giao d·ªãch
                tx_data, tx_error = get_mock_data("/transaction/get", params={'hash': tx_hash_input})
                time.sleep(0.5) # Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ

            if tx_error:
                st.error(f"‚ùå {tx_error}") # Hi·ªÉn th·ªã l·ªói gi·∫£ (n·∫øu hash kh√¥ng kh·ªõp m·∫´u)
            elif tx_data and 'transaction' in tx_data and 'meta' in tx_data:
                meta_info = tx_data['meta']
                transaction_info = tx_data['transaction']
                display_hash = meta_info.get('hash', {}).get('data', tx_hash_input)
                st.success(f"‚úÖ Hi·ªÉn th·ªã d·ªØ li·ªáu gi·∫£ cho Giao d·ªãch: `{display_hash}`")

                # Ph·∫ßn hi·ªÉn th·ªã gi·ªëng nh∆∞ tr∆∞·ªõc, d√πng d·ªØ li·ªáu gi·∫£
                tx_type = transaction_info.get('type')
                st.write(f"**Lo·∫°i:** `{tx_type}` ({get_transaction_type_name(tx_type)})")
                st.write(f"**Chi·ªÅu cao kh·ªëi:** `{meta_info.get('height', 'N/A')}`")

                nem_epoch_time = 1427587585 # M·ªëc th·ªüi gian g·ªëc c·ªßa NEM Mainnet
                if 'timeStamp' in transaction_info:
                     nem_ts = transaction_info['timeStamp']
                     utc_ts = nem_ts + nem_epoch_time
                     st.write(f"**Th·ªùi gian (UTC):** `{datetime.utcfromtimestamp(utc_ts).strftime('%Y-%m-%d %H:%M:%S')} UTC`")

                signer_pk = transaction_info.get('signerPublicKey') or transaction_info.get('signer')
                st.text_area("Public Key Ng∆∞·ªùi G·ª≠i", value=f"{signer_pk}", height=68, disabled=True)
                fee_micro = transaction_info.get('fee', 0)
                fee_xem = fee_micro / 1_000_000
                st.write(f"**Ph√≠:** {fee_xem:,.6f} XEM ({fee_micro} microXEM)")

                st.markdown("---"); st.subheader("Chi ti·∫øt theo lo·∫°i giao d·ªãch:")
                if tx_type == 257: # Giao d·ªãch chuy·ªÉn kho·∫£n
                    recipient_addr = transaction_info.get('recipientAddress') or transaction_info.get('recipient')
                    st.write(f"**ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n:** `{recipient_addr}`")
                    amount_micro = transaction_info.get('amount', 0)
                    amount_xem = amount_micro / 1_000_000
                    st.write(f"**S·ªë l∆∞·ª£ng:** {amount_xem:,.6f} XEM")
                    if 'message' in transaction_info and transaction_info['message'].get('payload'):
                        message_hex = transaction_info['message']['payload']
                        message_type = transaction_info['message'].get('type', 1)
                        if message_type == 1: # Tin nh·∫Øn th∆∞·ªùng
                            try: message_text = bytes.fromhex(message_hex).decode('utf-8', errors='replace'); st.text_area("Tin nh·∫Øn (Plain Text)", value=message_text, height=68, disabled=True)
                            except Exception: st.text_area("Tin nh·∫Øn (Hex)", value=message_hex, height=68, disabled=True); st.warning("Kh√¥ng th·ªÉ gi·∫£i m√£ tin nh·∫Øn UTF-8.")
                        else: st.text_area(f"Tin nh·∫Øn (Hex, Lo·∫°i {message_type})", value=message_hex, height=68, disabled=True) # Tin nh·∫Øn m√£ h√≥a ho·∫∑c lo·∫°i kh√°c
                    else: st.write("**Tin nh·∫Øn:** *Kh√¥ng c√≥*")
                else: st.info(f"Hi·ªÉn th·ªã th√¥ng tin chung cho lo·∫°i giao d·ªãch {tx_type}.")

                with st.expander("Xem D·ªØ Li·ªáu Giao D·ªãch Th√¥ (Gi·∫£)"):
                    st.json(tx_data)
            else:
                st.error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu giao d·ªãch gi·∫£ h·ª£p l·ªá.")

st.markdown("---")
st.caption("Demo n√†y ch·∫°y ho√†n to√†n tr√™n m√°y t√≠nh c·ªßa b·∫°n b·∫±ng d·ªØ li·ªáu gi·∫£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn. N√≥ m√¥ ph·ªèng c√°ch m·ªôt ·ª©ng d·ª•ng th·∫≠t t∆∞∆°ng t√°c v·ªõi blockchain NEM NIS1.")